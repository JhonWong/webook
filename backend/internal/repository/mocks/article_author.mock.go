// Code generated by MockGen. DO NOT EDIT.
// Source: backend/internal/repository/article_author.go

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/johnwongx/webook/backend/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorArticleRepository is a mock of AuthorArticleRepository interface.
type MockAuthorArticleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorArticleRepositoryMockRecorder
}

// MockAuthorArticleRepositoryMockRecorder is the mock recorder for MockAuthorArticleRepository.
type MockAuthorArticleRepositoryMockRecorder struct {
	mock *MockAuthorArticleRepository
}

// NewMockAuthorArticleRepository creates a new mock instance.
func NewMockAuthorArticleRepository(ctrl *gomock.Controller) *MockAuthorArticleRepository {
	mock := &MockAuthorArticleRepository{ctrl: ctrl}
	mock.recorder = &MockAuthorArticleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorArticleRepository) EXPECT() *MockAuthorArticleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuthorArticleRepository) Create(ctx context.Context, art domain.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, art)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuthorArticleRepositoryMockRecorder) Create(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthorArticleRepository)(nil).Create), ctx, art)
}

// Update mocks base method.
func (m *MockAuthorArticleRepository) Update(ctx context.Context, art domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, art)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAuthorArticleRepositoryMockRecorder) Update(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuthorArticleRepository)(nil).Update), ctx, art)
}
