// Code generated by MockGen. DO NOT EDIT.
// Source: backend/internal/repository/article_reader.go

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/johnwongx/webook/backend/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockReaderArticleRepository is a mock of ReaderArticleRepository interface.
type MockReaderArticleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReaderArticleRepositoryMockRecorder
}

// MockReaderArticleRepositoryMockRecorder is the mock recorder for MockReaderArticleRepository.
type MockReaderArticleRepositoryMockRecorder struct {
	mock *MockReaderArticleRepository
}

// NewMockReaderArticleRepository creates a new mock instance.
func NewMockReaderArticleRepository(ctrl *gomock.Controller) *MockReaderArticleRepository {
	mock := &MockReaderArticleRepository{ctrl: ctrl}
	mock.recorder = &MockReaderArticleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReaderArticleRepository) EXPECT() *MockReaderArticleRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockReaderArticleRepository) Save(ctx context.Context, art domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, art)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockReaderArticleRepositoryMockRecorder) Save(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockReaderArticleRepository)(nil).Save), ctx, art)
}
