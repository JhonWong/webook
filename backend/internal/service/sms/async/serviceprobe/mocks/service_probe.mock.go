// Code generated by MockGen. DO NOT EDIT.
// Source: backend/internal/service/sms/async/serviceprobe/types.go

// Package serviceprobemocks is a generated GoMock package.
package serviceprobemocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServiceProbe is a mock of ServiceProbe interface.
type MockServiceProbe struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProbeMockRecorder
}

// MockServiceProbeMockRecorder is the mock recorder for MockServiceProbe.
type MockServiceProbeMockRecorder struct {
	mock *MockServiceProbe
}

// NewMockServiceProbe creates a new mock instance.
func NewMockServiceProbe(ctrl *gomock.Controller) *MockServiceProbe {
	mock := &MockServiceProbe{ctrl: ctrl}
	mock.recorder = &MockServiceProbeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceProbe) EXPECT() *MockServiceProbeMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockServiceProbe) Add(ctx context.Context, err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockServiceProbeMockRecorder) Add(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockServiceProbe)(nil).Add), ctx, err)
}

// IsCrashed mocks base method.
func (m *MockServiceProbe) IsCrashed(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCrashed", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCrashed indicates an expected call of IsCrashed.
func (mr *MockServiceProbeMockRecorder) IsCrashed(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCrashed", reflect.TypeOf((*MockServiceProbe)(nil).IsCrashed), ctx)
}
